// <auto-generated />
using System;
using Fincompare.Persitence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Fincompare.Persitence.Migrations
{
    [DbContext(typeof(FincompareDbContext))]
    [Migration("20240729112856_UAT2")]
    partial class UAT2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Fincompare.Domain.Entities.ActiveAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetDescription")
                        .HasMaxLength(200)
                        .HasColumnType("integer")
                        .HasColumnName("Asset_Description");

                    b.Property<string>("AssetMerchantUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying")
                        .HasColumnName("Asset_Merchant_Url");

                    b.Property<int>("AssetsMasterId")
                        .HasColumnType("integer")
                        .HasColumnName("AssetsMaster_Id");

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date_Active");

                    b.Property<DateTime>("DateValidity")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date_Validity");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MerchantAssetPriority")
                        .HasColumnType("integer");

                    b.Property<int>("MerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("Merchant_Id");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("ServiceCategory_Id");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id")
                        .HasName("ActiveAsset_pkey");

                    b.HasIndex("AssetsMasterId");

                    b.HasIndex("Country3Iso");

                    b.HasIndex("MerchantId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ActiveAsset", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.AssetsMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying")
                        .HasColumnName("Asset_Description");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying")
                        .HasColumnName("Asset_Name");

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id")
                        .HasName("AssetsMaster_pkey");

                    b.HasIndex("Country3Iso");

                    b.ToTable("AssetsMaster", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying")
                        .HasColumnName("City_Name");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("StateId")
                        .HasColumnType("integer")
                        .HasColumnName("State_id");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("City_pkey");

                    b.HasIndex("StateId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.ClickLead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<int?>("CustomerUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CustomerUser_Id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("Merchant_Id");

                    b.Property<string>("RoutingParamters")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying")
                        .HasColumnName("Routing_Paramters");

                    b.HasKey("Id")
                        .HasName("ClickLead_pkey");

                    b.HasIndex("Country3Iso");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("MerchantId");

                    b.ToTable("ClickLead", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Country", b =>
                {
                    b.Property<string>("Country3Iso")
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<string>("Country2Iso")
                        .HasColumnType("character varying")
                        .HasColumnName("Country_2_iso");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying")
                        .HasColumnName("Country_Name");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.Property<string>("WebLink")
                        .HasMaxLength(150)
                        .HasColumnType("character varying")
                        .HasColumnName("Web_link");

                    b.HasKey("Country3Iso")
                        .HasName("Country_pkey");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CountryCurrency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<string>("CountryCurrencyCategoryId")
                        .HasColumnType("character varying(15)")
                        .HasColumnName("CountryCurrencyCategory_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<string>("CurrencyIso")
                        .HasColumnType("text")
                        .HasColumnName("Currency_3_iso");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrimaryCur")
                        .HasColumnType("boolean")
                        .HasColumnName("IsPrimary_Cur");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("CountryCurrency_pkey");

                    b.HasIndex("Country3Iso");

                    b.HasIndex("CountryCurrencyCategoryId");

                    b.HasIndex("CurrencyIso");

                    b.ToTable("CountryCurrency", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CountryCurrencyCategory", b =>
                {
                    b.Property<string>("CountryCurrencyCategoryId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("Country_Currency_Category_Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.HasKey("CountryCurrencyCategoryId")
                        .HasName("CountryCurrencyCategory_pkey");

                    b.ToTable("CountryCurrencyCategory", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CouponFormat")
                        .HasMaxLength(35)
                        .HasColumnType("character varying")
                        .HasColumnName("Coupon_Format");

                    b.Property<string>("CouponName")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Coupon_Name");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("Coupon_pkey");

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Currency", b =>
                {
                    b.Property<string>("CurrencyIso")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying")
                        .HasColumnName("Currency_Name");

                    b.Property<int>("Decimal")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.Property<int>("VolatilityRange")
                        .HasColumnType("integer")
                        .HasColumnName("Volatility_Range");

                    b.HasKey("CurrencyIso")
                        .HasName("Currency_pkey");

                    b.ToTable("Currency", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CustomerRateSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_date");

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CustomerUser_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ReceiveCur")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Receive_Cur");

                    b.Property<string>("SendCur")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Send_Cur");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<double>("WishRate")
                        .HasColumnType("double precision")
                        .HasColumnName("Wish_Rate");

                    b.HasKey("Id")
                        .HasName("CustomerRateSubscription_pkey");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("ReceiveCur");

                    b.HasIndex("SendCur");

                    b.ToTable("CustomerRateSubscription", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CustomerReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("Merchant_Id");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id")
                        .HasName("CustomerReview_pkey");

                    b.HasIndex("MerchantId");

                    b.ToTable("CustomerReview", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CustomerUsedCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Coupon_Code");

                    b.Property<int>("CustomerUserId")
                        .HasColumnType("integer")
                        .HasColumnName("CustomerUser_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("MerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("Merchant_Id");

                    b.Property<int>("MerchantProductCouponId")
                        .HasColumnType("integer")
                        .HasColumnName("MerchantProductCoupon_Id");

                    b.Property<DateTime>("UsedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Used_DateTime");

                    b.HasKey("Id")
                        .HasName("CustomerUsedCoupon_pkey");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("MerchantProductCouponId");

                    b.ToTable("CustomerUsedCoupon", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CustomerUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying");

                    b.Property<string>("AuthProvider")
                        .HasMaxLength(35)
                        .HasColumnType("character varying")
                        .HasColumnName("Auth_Provider");

                    b.Property<string>("AuthProviderId")
                        .HasColumnType("character varying")
                        .HasColumnName("Auth_Provider_Id");

                    b.Property<string>("City")
                        .HasColumnType("character varying");

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying")
                        .HasColumnName("Email_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying");

                    b.Property<bool>("PromoSubscription")
                        .HasColumnType("boolean")
                        .HasColumnName("Promo_Subscription");

                    b.Property<bool>("RateSubscription")
                        .HasColumnType("boolean")
                        .HasColumnName("Rate_Subscription");

                    b.Property<string>("State")
                        .HasColumnType("character varying");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("CustomerUser_pkey");

                    b.HasIndex("Country3Iso");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerUser", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.GroupMerchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<string>("GroupCsem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying")
                        .HasColumnName("Group_CSEm");

                    b.Property<string>("GroupCsph")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying")
                        .HasColumnName("Group_CSPh");

                    b.Property<string>("GroupEm1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying")
                        .HasColumnName("Group_Em1");

                    b.Property<string>("GroupEm2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying")
                        .HasColumnName("Group_Em2");

                    b.Property<string>("GroupMerchantName")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying")
                        .HasColumnName("Group_Merchant_Name");

                    b.Property<string>("GroupMerchantShortName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying")
                        .HasColumnName("Group_Merchant_ShortName");

                    b.Property<string>("GroupPh1")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying")
                        .HasColumnName("Group_Ph1");

                    b.Property<string>("GroupPh2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying")
                        .HasColumnName("Group_Ph2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("GroupMerchant_pkey");

                    b.HasIndex("Country3Iso");

                    b.ToTable("GroupMerchant", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Instrument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<string>("InstrumentName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying")
                        .HasColumnName("Instrument_Name");

                    b.Property<string>("InstrumentType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying")
                        .HasColumnName("Instrument_Type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("Instrument_pkey");

                    b.HasIndex("Country3Iso");

                    b.ToTable("Instrument", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MarketRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<string>("RateSource")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Rate_Source");

                    b.Property<string>("ReceiveCur")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Receive_Cur");

                    b.Property<string>("SendCur")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Send_Cur");

                    b.HasKey("Id")
                        .HasName("MarketRate_pkey");

                    b.HasIndex("ReceiveCur");

                    b.HasIndex("SendCur");

                    b.ToTable("MarketRate", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Merchant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AffiliateId")
                        .HasMaxLength(36)
                        .HasColumnType("character varying")
                        .HasColumnName("Affiliate_Id");

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<int>("GroupMerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("GroupMerchant_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MerchantCsem")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying")
                        .HasColumnName("Merchant_CSEm");

                    b.Property<string>("MerchantCsph")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying")
                        .HasColumnName("Merchant_CSPh");

                    b.Property<string>("MerchantEm1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying")
                        .HasColumnName("Merchant_EM1");

                    b.Property<string>("MerchantEm2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying")
                        .HasColumnName("Merchant_EM2");

                    b.Property<string>("MerchantName")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying")
                        .HasColumnName("Merchant_Name");

                    b.Property<string>("MerchantPh1")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying")
                        .HasColumnName("Merchant_Ph1");

                    b.Property<string>("MerchantPh2")
                        .HasMaxLength(15)
                        .HasColumnType("character varying")
                        .HasColumnName("Merchant_Ph2");

                    b.Property<string>("MerchantShortName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying")
                        .HasColumnName("Merchant_ShortName");

                    b.Property<string>("MerchantType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying")
                        .HasColumnName("Merchant_Type");

                    b.Property<string>("RoutingParameters")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying")
                        .HasColumnName("Routing_Parameters");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying")
                        .HasColumnName("Web_Url");

                    b.HasKey("Id")
                        .HasName("Merchant_pkey");

                    b.HasIndex("Country3Iso");

                    b.HasIndex("GroupMerchantId");

                    b.HasIndex("UserId");

                    b.ToTable("Merchant", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantCampaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CampaignCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying")
                        .HasColumnName("Campaign_Code");

                    b.Property<string>("CampaignDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying")
                        .HasColumnName("Campaign_Description");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateActive")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date_Active");

                    b.Property<DateTime>("DateValidity")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Date_Validity");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("Merchant_Id");

                    b.Property<int?>("MerchantProductId")
                        .HasColumnType("integer")
                        .HasColumnName("MerchantProduct_Id");

                    b.Property<string>("ReceiveCountry3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Receive_Country_3_iso");

                    b.Property<string>("SendCountry3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Send_Country_3_iso");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("ServiceCategory_Id");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id")
                        .HasName("MerchantCampaign_pkey");

                    b.HasIndex("MerchantId");

                    b.HasIndex("MerchantProductId");

                    b.HasIndex("ReceiveCountry3Iso");

                    b.HasIndex("SendCountry3Iso");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("MerchantCampaign", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("integer")
                        .HasColumnName("Instrument_Id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("Merchant_Id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("Product_Id");

                    b.Property<string>("ReceiveCountry3Iso")
                        .HasColumnType("character varying")
                        .HasColumnName("Receive_Country_3_iso");

                    b.Property<string>("ReceiveCurrencyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Receive_Currency_Id");

                    b.Property<string>("SendCountry3Iso")
                        .HasColumnType("character varying")
                        .HasColumnName("Send_Country_3_iso");

                    b.Property<string>("SendCurrencyId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Send_Currency_Id");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("ServiceCategory_Id");

                    b.Property<string>("ServiceLevels")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying")
                        .HasColumnName("Service_Levels");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("MerchantProduct_pkey");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReceiveCountry3Iso");

                    b.HasIndex("ReceiveCurrencyId");

                    b.HasIndex("SendCountry3Iso");

                    b.HasIndex("SendCurrencyId");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("MerchantProduct", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantProductCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying")
                        .HasColumnName("Coupon_Code");

                    b.Property<int>("CouponId")
                        .HasColumnType("integer")
                        .HasColumnName("Coupon_Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiple")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("MerchantCouponBatch")
                        .HasMaxLength(36)
                        .HasColumnType("character varying")
                        .HasColumnName("Merchant_Coupon_Batch");

                    b.Property<int?>("MerchantId")
                        .HasColumnType("integer");

                    b.Property<int?>("MerchantProductId")
                        .HasColumnType("integer")
                        .HasColumnName("MerchantProduct_Id");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.Property<DateTime>("ValidityFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ValidityTo")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("MerchantProductCoupon_pkey");

                    b.HasIndex("CouponId");

                    b.HasIndex("MerchantId");

                    b.HasIndex("MerchantProductId");

                    b.ToTable("MerchantProductCoupon", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantRemitProductFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<double>("Fees")
                        .HasColumnType("double precision");

                    b.Property<string>("FeesCur")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Fees_Cur");

                    b.Property<string>("FeesName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying")
                        .HasColumnName("Fees_Name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("Merchant_Id");

                    b.Property<int?>("MerchantProductId")
                        .HasColumnType("integer")
                        .HasColumnName("MerchantProduct_Id");

                    b.Property<int?>("PayInInstrumentId")
                        .HasColumnType("integer");

                    b.Property<double?>("PromoFees")
                        .HasColumnType("double precision")
                        .HasColumnName("Promo_Fees");

                    b.Property<string>("ReceiveCountry3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Receive_Country_3_iso");

                    b.Property<string>("ReceiveCurrency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Receive_Currency");

                    b.Property<double>("ReceiveMaxLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("Receive_Max_Limit");

                    b.Property<double>("ReceiveMinLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("Receive_Min_Limit");

                    b.Property<string>("SendCountry3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Send_Country_3_iso");

                    b.Property<string>("SendCurrency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Send_Currency");

                    b.Property<double>("SendMaxLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("Send_Max_Limit");

                    b.Property<double>("SendMinLimit")
                        .HasColumnType("double precision")
                        .HasColumnName("Send_Min_Limit");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.Property<DateTime>("ValidityExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("VariableFee")
                        .HasColumnType("integer")
                        .HasColumnName("Variable_Fee");

                    b.HasKey("Id")
                        .HasName("MerchantRemitProductFee_pkey");

                    b.HasIndex("FeesCur");

                    b.HasIndex("MerchantId");

                    b.HasIndex("MerchantProductId");

                    b.HasIndex("PayInInstrumentId");

                    b.HasIndex("ReceiveCountry3Iso");

                    b.HasIndex("ReceiveCurrency");

                    b.HasIndex("SendCountry3Iso");

                    b.HasIndex("SendCurrency");

                    b.ToTable("MerchantRemitProductFee", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantRemitProductRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MerchantId")
                        .HasColumnType("integer")
                        .HasColumnName("Merchant_Id");

                    b.Property<int?>("MerchantProductId")
                        .HasColumnType("integer")
                        .HasColumnName("MerchantProduct_Id");

                    b.Property<string>("MerchantRateRef")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying")
                        .HasColumnName("Merchant_Rate_Ref");

                    b.Property<double>("PromoRate")
                        .HasColumnType("double precision")
                        .HasColumnName("Promo_Rate");

                    b.Property<double>("Rate")
                        .HasColumnType("double precision");

                    b.Property<string>("ReceiveCountry3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Receive_Country_3_iso");

                    b.Property<string>("ReceiveCur")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Receive_Cur");

                    b.Property<int>("ReceiveMaxLimit")
                        .HasColumnType("integer")
                        .HasColumnName("Receive_Max_Limit");

                    b.Property<int>("ReceiveMinLimit")
                        .HasColumnType("integer")
                        .HasColumnName("Receive_Min_Limit");

                    b.Property<string>("SendCountry3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Send_Country_3_iso");

                    b.Property<string>("SendCur")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Send_Cur");

                    b.Property<int>("SendMaxLimit")
                        .HasColumnType("integer")
                        .HasColumnName("Send_Max_Limit");

                    b.Property<int>("SendMinLimit")
                        .HasColumnType("integer")
                        .HasColumnName("Send_Min_Limit");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.Property<DateTime>("ValidityExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Validity_Expiry");

                    b.HasKey("Id")
                        .HasName("MerchantRemitProductRate_pkey");

                    b.HasIndex("MerchantId");

                    b.HasIndex("MerchantProductId");

                    b.HasIndex("MerchantRateRef")
                        .IsUnique();

                    b.HasIndex("ReceiveCountry3Iso");

                    b.HasIndex("ReceiveCur");

                    b.HasIndex("SendCountry3Iso");

                    b.HasIndex("SendCur");

                    b.ToTable("MerchantRemitProductRate", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("character varying")
                        .HasColumnName("Product_Description");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying")
                        .HasColumnName("Product_Name");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("ServiceCategory_Id");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("Product_pkey");

                    b.HasIndex("Country3Iso");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.RateCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Rate_Card")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying")
                        .HasColumnName("Rate_Card");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id")
                        .HasName("RateCard_pkey");

                    b.HasIndex("Country3Iso");

                    b.ToTable("RateCard", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ServCategoryName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying")
                        .HasColumnName("Serv_Category_Name");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("ServiceCategory_pkey");

                    b.HasIndex("Country3Iso");

                    b.ToTable("ServiceCategory", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country3Iso")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("Country_3_iso");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Created_Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("State_Name");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Updated_Date");

                    b.HasKey("Id")
                        .HasName("State_pkey");

                    b.HasIndex("Country3Iso");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMerchant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVendor")
                        .HasColumnType("boolean");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            IsAdmin = true,
                            IsCustomer = true,
                            IsDeleted = false,
                            IsMerchant = true,
                            IsVendor = true,
                            PermissionName = "CanAccessAdmin"
                        },
                        new
                        {
                            Id = 11,
                            IsAdmin = false,
                            IsCustomer = false,
                            IsDeleted = false,
                            IsMerchant = true,
                            IsVendor = true,
                            PermissionName = "CanAccessMerchant"
                        },
                        new
                        {
                            Id = 12,
                            IsAdmin = false,
                            IsCustomer = false,
                            IsDeleted = false,
                            IsMerchant = false,
                            IsVendor = true,
                            PermissionName = "CanAccessVendor"
                        },
                        new
                        {
                            Id = 13,
                            IsAdmin = false,
                            IsCustomer = true,
                            IsDeleted = false,
                            IsMerchant = false,
                            IsVendor = false,
                            PermissionName = "CanAccessCustomer"
                        });
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            RoleName = "Merchant"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            RoleName = "Vendor"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            RoleName = "Customer"
                        });
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Enabled",
                            IsDeleted = false,
                            StatusCode = "EN"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Disabled",
                            IsDeleted = false,
                            StatusCode = "DS"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Locked",
                            IsDeleted = false,
                            StatusCode = "LK"
                        },
                        new
                        {
                            Id = 4,
                            Description = "PasswordExpired",
                            IsDeleted = false,
                            StatusCode = "PE"
                        });
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StatusId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 29, 11, 28, 56, 8, DateTimeKind.Utc).AddTicks(6403),
                            Email = "carl.unni@fincompare.com",
                            FirstName = "Carl",
                            IsDeleted = false,
                            LastName = "Unni",
                            PasswordHash = new byte[] { 232, 111, 120, 168, 163, 202, 240, 182, 13, 142, 116, 229, 148, 42, 166, 216, 109, 193, 80, 205, 60, 3, 51, 138, 239, 37, 183, 210, 215, 227, 172, 199 },
                            Phone = "1234567890",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 29, 11, 28, 56, 8, DateTimeKind.Utc).AddTicks(6412),
                            Email = "sailesh.pillai@fincompare.com",
                            FirstName = "Sailesh",
                            IsDeleted = false,
                            LastName = "Pillai",
                            PasswordHash = new byte[] { 232, 111, 120, 168, 163, 202, 240, 182, 13, 142, 116, 229, 148, 42, 166, 216, 109, 193, 80, 205, 60, 3, 51, 138, 239, 37, 183, 210, 215, 227, 172, 199 },
                            Phone = "9876543216",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.UserPermission", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            PermissionId = 10,
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = 2,
                            PermissionId = 10,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            IsDeleted = false
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.ActiveAsset", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.AssetsMaster", "AssetsMaster")
                        .WithMany("ActiveAssets")
                        .HasForeignKey("AssetsMasterId")
                        .IsRequired()
                        .HasConstraintName("ActiveAsset_AssetsMaster_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("ActiveAssets")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("ActiveAsset_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Merchant", "Merchant")
                        .WithMany("ActiveAssets")
                        .HasForeignKey("MerchantId")
                        .IsRequired()
                        .HasConstraintName("ActiveAsset_Merchant_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("ActiveAssets")
                        .HasForeignKey("ServiceCategoryId")
                        .IsRequired()
                        .HasConstraintName("ActiveAsset_ServiceCategory_Id_fkey");

                    b.Navigation("AssetsMaster");

                    b.Navigation("Country3IsoNavigation");

                    b.Navigation("Merchant");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.AssetsMaster", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("AssetsMasters")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("AssetsMaster_Country_3_iso_fkey");

                    b.Navigation("Country3IsoNavigation");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.City", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .IsRequired()
                        .HasConstraintName("City_State_id_fkey");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.ClickLead", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("ClickLeads")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("ClickLead_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.CustomerUser", "CustomerUser")
                        .WithMany("ClickLeads")
                        .HasForeignKey("CustomerUserId")
                        .HasConstraintName("ClickLead_CustomerUser_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Merchant", "Merchant")
                        .WithMany("ClickLeads")
                        .HasForeignKey("MerchantId")
                        .IsRequired()
                        .HasConstraintName("ClickLead_Merchant_Id_fkey");

                    b.Navigation("Country3IsoNavigation");

                    b.Navigation("CustomerUser");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CountryCurrency", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("CountryCurrencies")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("CountryCurrency_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.CountryCurrencyCategory", "CountryCurrencyCategory")
                        .WithMany("CountryCurrencies")
                        .HasForeignKey("CountryCurrencyCategoryId")
                        .HasConstraintName("CountryCurrency_CountryCurrencyCategory_id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Currency", "Currency")
                        .WithMany("CountryCurrencies")
                        .HasForeignKey("CurrencyIso")
                        .HasConstraintName("CountryCurrency_Currency_3_iso_fkey");

                    b.Navigation("Country3IsoNavigation");

                    b.Navigation("CountryCurrencyCategory");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CustomerRateSubscription", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.CustomerUser", "CustomerUser")
                        .WithMany("CustomerRateSubscriptions")
                        .HasForeignKey("CustomerUserId")
                        .IsRequired()
                        .HasConstraintName("CustomerRateSubscription_CustomerUser_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Currency", "ReceiveCurNavigation")
                        .WithMany("CustomerRateSubscriptionReceiveCurNavigations")
                        .HasForeignKey("ReceiveCur")
                        .IsRequired()
                        .HasConstraintName("CustomerRateSubscription_Receive_Cur_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Currency", "SendCurNavigation")
                        .WithMany("CustomerRateSubscriptionSendCurNavigations")
                        .HasForeignKey("SendCur")
                        .IsRequired()
                        .HasConstraintName("CustomerRateSubscription_Send_Cur_fkey");

                    b.Navigation("CustomerUser");

                    b.Navigation("ReceiveCurNavigation");

                    b.Navigation("SendCurNavigation");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CustomerReview", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Merchant", "Merchant")
                        .WithMany("CustomerReviews")
                        .HasForeignKey("MerchantId")
                        .IsRequired()
                        .HasConstraintName("CustomerReview_Merchant_Id_fkey");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CustomerUsedCoupon", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.CustomerUser", "CustomerUser")
                        .WithMany("CustomerUsedCoupons")
                        .HasForeignKey("CustomerUserId")
                        .IsRequired()
                        .HasConstraintName("CustomerUsedCoupon_CustomerUser_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Merchant", "Merchant")
                        .WithMany("CustomerUsedCoupons")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("CustomerUsedCoupon_Merchant_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.MerchantProductCoupon", "MerchantProductCoupon")
                        .WithMany("CustomerUsedCoupons")
                        .HasForeignKey("MerchantProductCouponId")
                        .IsRequired()
                        .HasConstraintName("CustomerUsedCoupon_MerchantProductCoupon_Id_fkey");

                    b.Navigation("CustomerUser");

                    b.Navigation("Merchant");

                    b.Navigation("MerchantProductCoupon");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CustomerUser", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("CustomerUser_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.UserManagementEntities.User", "User")
                        .WithMany("CustomerUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("CustomerUser_UserId_fkey");

                    b.Navigation("Country3IsoNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.GroupMerchant", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("GroupMerchants")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("GroupMerchant_Country_3_iso_fkey");

                    b.Navigation("Country3IsoNavigation");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Instrument", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("Instruments")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("Instrument_Country_3_iso_fkey");

                    b.Navigation("Country3IsoNavigation");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MarketRate", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Currency", "ReceiveCurNavigation")
                        .WithMany("MarketRateReceiveCurNavigations")
                        .HasForeignKey("ReceiveCur")
                        .IsRequired()
                        .HasConstraintName("MarketRate_Currency_Id_fkey1");

                    b.HasOne("Fincompare.Domain.Entities.Currency", "SendCurNavigation")
                        .WithMany("MarketRateSendCurNavigations")
                        .HasForeignKey("SendCur")
                        .IsRequired()
                        .HasConstraintName("MarketRate_Send_Cur_fkey");

                    b.Navigation("ReceiveCurNavigation");

                    b.Navigation("SendCurNavigation");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Merchant", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("Merchants")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("Merchant_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.GroupMerchant", "GroupMerchant")
                        .WithMany("Merchants")
                        .HasForeignKey("GroupMerchantId")
                        .IsRequired()
                        .HasConstraintName("Merchant_GroupMerchant_id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.UserManagementEntities.User", "User")
                        .WithMany("Merchants")
                        .HasForeignKey("UserId")
                        .HasConstraintName("Merchant_UserId_fkey");

                    b.Navigation("Country3IsoNavigation");

                    b.Navigation("GroupMerchant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantCampaign", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Merchant", "Merchant")
                        .WithMany("MerchantCampaigns")
                        .HasForeignKey("MerchantId")
                        .IsRequired()
                        .HasConstraintName("MerchantCampaign_Merchant_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.MerchantProduct", "MerchantProduct")
                        .WithMany("MerchantCampaigns")
                        .HasForeignKey("MerchantProductId")
                        .HasConstraintName("MerchantCampaign_MerchantProduct_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Country", "ReceiveCountry3IsoNavigation")
                        .WithMany("MerchantCampaignReceiveCountry3IsoNavigations")
                        .HasForeignKey("ReceiveCountry3Iso")
                        .IsRequired()
                        .HasConstraintName("MerchantCampaign_Receive_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Country", "SendCountry3IsoNavigation")
                        .WithMany("MerchantCampaignSendCountry3IsoNavigations")
                        .HasForeignKey("SendCountry3Iso")
                        .IsRequired()
                        .HasConstraintName("MerchantCampaign_Send_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("MerchantCampaigns")
                        .HasForeignKey("ServiceCategoryId")
                        .IsRequired()
                        .HasConstraintName("MerchantCampaign_ServiceCategory_Id_fkey");

                    b.Navigation("Merchant");

                    b.Navigation("MerchantProduct");

                    b.Navigation("ReceiveCountry3IsoNavigation");

                    b.Navigation("SendCountry3IsoNavigation");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantProduct", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Instrument", "Instrument")
                        .WithMany("MerchantProducts")
                        .HasForeignKey("InstrumentId")
                        .IsRequired()
                        .HasConstraintName("MerchantProduct_Instrument_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Merchant", "Merchant")
                        .WithMany("MerchantProducts")
                        .HasForeignKey("MerchantId")
                        .IsRequired()
                        .HasConstraintName("MerchantProduct_Merchant_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Product", "Product")
                        .WithMany("MerchantProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("MerchantProduct_Product_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Country", "ReceiveCountry3IsoNavigation")
                        .WithMany("MerchantProductReceiveCountry3IsoNavigations")
                        .HasForeignKey("ReceiveCountry3Iso")
                        .HasConstraintName("MerchantProduct_Receive_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Currency", "ReceiveCurrency")
                        .WithMany("MerchantProductReceiveCurrencies")
                        .HasForeignKey("ReceiveCurrencyId")
                        .IsRequired()
                        .HasConstraintName("MerchantProduct_Receive_Currency_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Country", "SendCountry3IsoNavigation")
                        .WithMany("MerchantProductSendCountry3IsoNavigations")
                        .HasForeignKey("SendCountry3Iso")
                        .HasConstraintName("MerchantProduct_Send_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Currency", "SendCurrency")
                        .WithMany("MerchantProductSendCurrencies")
                        .HasForeignKey("SendCurrencyId")
                        .IsRequired()
                        .HasConstraintName("MerchantProduct_Send_Currency_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("MerchantProducts")
                        .HasForeignKey("ServiceCategoryId")
                        .IsRequired()
                        .HasConstraintName("MerchantProduct_ServiceCategory_Id_fkey");

                    b.Navigation("Instrument");

                    b.Navigation("Merchant");

                    b.Navigation("Product");

                    b.Navigation("ReceiveCountry3IsoNavigation");

                    b.Navigation("ReceiveCurrency");

                    b.Navigation("SendCountry3IsoNavigation");

                    b.Navigation("SendCurrency");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantProductCoupon", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Coupon", "Coupon")
                        .WithMany("MerchantProductCoupons")
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("MerchantProductCoupon_Coupon_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Merchant", "Merchant")
                        .WithMany("MerchantProductCoupons")
                        .HasForeignKey("MerchantId")
                        .HasConstraintName("MerchantProductCoupon_Merchant_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.MerchantProduct", "MerchantProduct")
                        .WithMany("MerchantProductCoupons")
                        .HasForeignKey("MerchantProductId")
                        .HasConstraintName("MerchantProductCoupon_MerchantProduct_Id_fkey");

                    b.Navigation("Coupon");

                    b.Navigation("Merchant");

                    b.Navigation("MerchantProduct");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantRemitProductFee", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Currency", "FeesCurNavigation")
                        .WithMany("MerchantRemitProductFeeFeesCurNavigations")
                        .HasForeignKey("FeesCur")
                        .IsRequired()
                        .HasConstraintName("MerchantRemitProductFee_Fees_Cur_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Merchant", "Merchant")
                        .WithMany("MerchantRemitProductFees")
                        .HasForeignKey("MerchantId")
                        .IsRequired()
                        .HasConstraintName("MerchantRemitProductFee_Merchant_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.MerchantProduct", "MerchantProduct")
                        .WithMany("MerchantRemitProductFees")
                        .HasForeignKey("MerchantProductId")
                        .HasConstraintName("MerchantRemitProductFee_MerchantProduct_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Instrument", "Instruments")
                        .WithMany("MerchantRemitProductFees")
                        .HasForeignKey("PayInInstrumentId")
                        .HasConstraintName("MerchantRemitProductFee_PayInInstrumentId_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Country", "ReceiveCountry3IsoNavigation")
                        .WithMany("MerchantRemitProductFeeReceiveCountry3IsoNavigations")
                        .HasForeignKey("ReceiveCountry3Iso")
                        .IsRequired()
                        .HasConstraintName("MerchantRemitProductFee_Receive_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Currency", "ReceiveCurrencyNavigation")
                        .WithMany("MerchantRemitProductFeeReceiveCurrencyNavigations")
                        .HasForeignKey("ReceiveCurrency")
                        .IsRequired()
                        .HasConstraintName("MerchantRemitProductFee_Receive_Currency_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Country", "SendCountry3IsoNavigation")
                        .WithMany("MerchantRemitProductFeeSendCountry3IsoNavigations")
                        .HasForeignKey("SendCountry3Iso")
                        .IsRequired()
                        .HasConstraintName("MerchantRemitProductFee_Send_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Currency", "SendCurrencyNavigation")
                        .WithMany("MerchantRemitProductFeeSendCurrencyNavigations")
                        .HasForeignKey("SendCurrency")
                        .IsRequired()
                        .HasConstraintName("MerchantRemitProductFee_Send_Currency_fkey");

                    b.Navigation("FeesCurNavigation");

                    b.Navigation("Instruments");

                    b.Navigation("Merchant");

                    b.Navigation("MerchantProduct");

                    b.Navigation("ReceiveCountry3IsoNavigation");

                    b.Navigation("ReceiveCurrencyNavigation");

                    b.Navigation("SendCountry3IsoNavigation");

                    b.Navigation("SendCurrencyNavigation");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantRemitProductRate", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Merchant", "Merchant")
                        .WithMany("MerchantRemitProductRates")
                        .HasForeignKey("MerchantId")
                        .IsRequired()
                        .HasConstraintName("MerchantRemitProductRate_Merchant_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.MerchantProduct", "MerchantProduct")
                        .WithMany("MerchantRemitProductRates")
                        .HasForeignKey("MerchantProductId")
                        .HasConstraintName("MerchantRemitProductRate_MerchantProduct_Id_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Country", "ReceiveCountry3IsoNavigation")
                        .WithMany("MerchantRemitProductRateReceiveCountry3IsoNavigations")
                        .HasForeignKey("ReceiveCountry3Iso")
                        .IsRequired()
                        .HasConstraintName("MerchantRemitProductRate_Receive_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Currency", "ReceiveCurNavigation")
                        .WithMany("MerchantRemitProductRateReceiveCurNavigations")
                        .HasForeignKey("ReceiveCur")
                        .IsRequired()
                        .HasConstraintName("MerchantRemitProductRate_Receive_Cur_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Country", "SendCountry3IsoNavigation")
                        .WithMany("MerchantRemitProductRateSendCountry3IsoNavigations")
                        .HasForeignKey("SendCountry3Iso")
                        .IsRequired()
                        .HasConstraintName("MerchantRemitProductRate_Send_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.Currency", "SendCurNavigation")
                        .WithMany("MerchantRemitProductRateSendCurNavigations")
                        .HasForeignKey("SendCur")
                        .IsRequired()
                        .HasConstraintName("MerchantRemitProductRate_Send_Cur_fkey");

                    b.Navigation("Merchant");

                    b.Navigation("MerchantProduct");

                    b.Navigation("ReceiveCountry3IsoNavigation");

                    b.Navigation("ReceiveCurNavigation");

                    b.Navigation("SendCountry3IsoNavigation");

                    b.Navigation("SendCurNavigation");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Product", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("Products")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("Product_Country_3_iso_fkey");

                    b.HasOne("Fincompare.Domain.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("Products")
                        .HasForeignKey("ServiceCategoryId")
                        .IsRequired()
                        .HasConstraintName("Product_ServiceCategory_Id_fkey");

                    b.Navigation("Country3IsoNavigation");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.RateCard", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("RateCards")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("RateCard_Country_3_iso_fkey");

                    b.Navigation("Country3IsoNavigation");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.ServiceCategory", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("ServiceCategories")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("ServiceCategory_Country_3_iso_fkey");

                    b.Navigation("Country3IsoNavigation");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.State", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.Country", "Country3IsoNavigation")
                        .WithMany("States")
                        .HasForeignKey("Country3Iso")
                        .IsRequired()
                        .HasConstraintName("State_Country_3_iso_fkey");

                    b.Navigation("Country3IsoNavigation");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.User", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.UserManagementEntities.User", "CreatedUser")
                        .WithMany("CreatedUsers")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_User_CreatedBy");

                    b.HasOne("Fincompare.Domain.Entities.UserManagementEntities.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("User_StatusId_fkey");

                    b.Navigation("CreatedUser");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.UserPermission", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.UserManagementEntities.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fincompare.Domain.Entities.UserManagementEntities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.UserRole", b =>
                {
                    b.HasOne("Fincompare.Domain.Entities.UserManagementEntities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fincompare.Domain.Entities.UserManagementEntities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.AssetsMaster", b =>
                {
                    b.Navigation("ActiveAssets");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Country", b =>
                {
                    b.Navigation("ActiveAssets");

                    b.Navigation("AssetsMasters");

                    b.Navigation("ClickLeads");

                    b.Navigation("CountryCurrencies");

                    b.Navigation("CustomerUsers");

                    b.Navigation("GroupMerchants");

                    b.Navigation("Instruments");

                    b.Navigation("MerchantCampaignReceiveCountry3IsoNavigations");

                    b.Navigation("MerchantCampaignSendCountry3IsoNavigations");

                    b.Navigation("MerchantProductReceiveCountry3IsoNavigations");

                    b.Navigation("MerchantProductSendCountry3IsoNavigations");

                    b.Navigation("MerchantRemitProductFeeReceiveCountry3IsoNavigations");

                    b.Navigation("MerchantRemitProductFeeSendCountry3IsoNavigations");

                    b.Navigation("MerchantRemitProductRateReceiveCountry3IsoNavigations");

                    b.Navigation("MerchantRemitProductRateSendCountry3IsoNavigations");

                    b.Navigation("Merchants");

                    b.Navigation("Products");

                    b.Navigation("RateCards");

                    b.Navigation("ServiceCategories");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CountryCurrencyCategory", b =>
                {
                    b.Navigation("CountryCurrencies");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("MerchantProductCoupons");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Currency", b =>
                {
                    b.Navigation("CountryCurrencies");

                    b.Navigation("CustomerRateSubscriptionReceiveCurNavigations");

                    b.Navigation("CustomerRateSubscriptionSendCurNavigations");

                    b.Navigation("MarketRateReceiveCurNavigations");

                    b.Navigation("MarketRateSendCurNavigations");

                    b.Navigation("MerchantProductReceiveCurrencies");

                    b.Navigation("MerchantProductSendCurrencies");

                    b.Navigation("MerchantRemitProductFeeFeesCurNavigations");

                    b.Navigation("MerchantRemitProductFeeReceiveCurrencyNavigations");

                    b.Navigation("MerchantRemitProductFeeSendCurrencyNavigations");

                    b.Navigation("MerchantRemitProductRateReceiveCurNavigations");

                    b.Navigation("MerchantRemitProductRateSendCurNavigations");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.CustomerUser", b =>
                {
                    b.Navigation("ClickLeads");

                    b.Navigation("CustomerRateSubscriptions");

                    b.Navigation("CustomerUsedCoupons");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.GroupMerchant", b =>
                {
                    b.Navigation("Merchants");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Instrument", b =>
                {
                    b.Navigation("MerchantProducts");

                    b.Navigation("MerchantRemitProductFees");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Merchant", b =>
                {
                    b.Navigation("ActiveAssets");

                    b.Navigation("ClickLeads");

                    b.Navigation("CustomerReviews");

                    b.Navigation("CustomerUsedCoupons");

                    b.Navigation("MerchantCampaigns");

                    b.Navigation("MerchantProductCoupons");

                    b.Navigation("MerchantProducts");

                    b.Navigation("MerchantRemitProductFees");

                    b.Navigation("MerchantRemitProductRates");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantProduct", b =>
                {
                    b.Navigation("MerchantCampaigns");

                    b.Navigation("MerchantProductCoupons");

                    b.Navigation("MerchantRemitProductFees");

                    b.Navigation("MerchantRemitProductRates");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.MerchantProductCoupon", b =>
                {
                    b.Navigation("CustomerUsedCoupons");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.Product", b =>
                {
                    b.Navigation("MerchantProducts");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.ServiceCategory", b =>
                {
                    b.Navigation("ActiveAssets");

                    b.Navigation("MerchantCampaigns");

                    b.Navigation("MerchantProducts");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.Permission", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.Status", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Fincompare.Domain.Entities.UserManagementEntities.User", b =>
                {
                    b.Navigation("CreatedUsers");

                    b.Navigation("CustomerUsers");

                    b.Navigation("Merchants");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
